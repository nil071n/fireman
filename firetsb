








local p = game.Players.LocalPlayer
local Humanoid = p.Character:WaitForChild("Humanoid")

-- Stop any playing animation immediately
for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
    animTrack:Stop()
end

-- Create and load new animation
local AnimAnim = Instance.new("Animation")
AnimAnim.AnimationId = "rbxassetid://106778226674700" -- Your animation ID

local Anim = Humanoid:LoadAnimation(AnimAnim)

-- Play the animation
Anim:Play()

-- Adjust the speed
Anim:AdjustSpeed(0.1) -- Initial speed (does nothing because of the next line)
Anim.TimePosition = 0 -- Start time at 0
Anim:AdjustSpeed(0.9) -- Adjust speed again (this is effective)









local Test = game.ReplicatedStorage.Resources.AtomicFX.particlesroot.RootFlame

local test = Test:Clone()
test.Parent = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")

for _, child in ipairs(test:GetChildren()) do
    if child:IsA("ParticleEmitter") then
        child:Emit(15)
        child.Enabled = true
    end
end


getgenv().Time = 0.5

getgenv().Head = {
    76586137799801,  -- Accessory IDs for the head
    15568859782,
    12931836677,
}

getgenv().Torso = {
    16829807051,  -- Accessory IDs for the torso
    16829807922,
}

local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- Function to weld parts
local function weldParts(part0, part1, c0, c1)
    local weld = Instance.new("Weld")
    weld.Part0 = part0
    weld.Part1 = part1
    weld.C0 = c0
    weld.C1 = c1
    weld.Parent = part0
    return weld
end

-- Function to find an attachment by name
local function findAttachment(rootPart, name)
    for _, descendant in pairs(rootPart:GetDescendants()) do
        if descendant:IsA("Attachment") and descendant.Name == name then
            return descendant
        end
    end
end

-- Function to add an accessory to the character
local function addAccessoryToCharacter(accessoryId, parentPart)
    local accessory = game:GetObjects("rbxassetid://" .. tostring(accessoryId))[1]
    local character = player.Character

    -- Parent the accessory to Workspace first
    accessory.Parent = game.Workspace

    local handle = accessory:FindFirstChild("Handle")
    if handle then
        handle.CanCollide = false
        local attachment = handle:FindFirstChildOfClass("Attachment")
        if attachment then
            local parentAttachment = findAttachment(parentPart, attachment.Name)
            if parentAttachment then
                weldParts(parentPart, handle, parentAttachment.CFrame, attachment.CFrame)
            end
        else
            local parent = character:FindFirstChild(parentPart.Name)
            if parent then
                local attachmentPoint = accessory.AttachmentPoint
                weldParts(parent, handle, CFrame.new(0, 0.5, 0), attachmentPoint.CFrame)
            end
        end
    end

    -- Parent the accessory to the character
    accessory.Parent = character
end

-- Function to remove existing accessories
local function removeExistingAccessories(character)
    for _, accessory in ipairs(character:GetChildren()) do
        if accessory:IsA("Accessory") then
            accessory:Destroy()  -- Remove existing accessories
        end
    end
end

-- Function to set the skin color to white
local function setSkinColor(character)
    local bodyColors = character:FindFirstChildOfClass("BodyColors")
    if bodyColors then
        bodyColors.HeadColor = BrickColor.White()
        bodyColors.TorsoColor = BrickColor.White()
        bodyColors.LeftArmColor = BrickColor.White()
        bodyColors.RightArmColor = BrickColor.White()
        bodyColors.LeftLegColor = BrickColor.White()
        bodyColors.RightLegColor = BrickColor.White()
    end
end

-- Function to handle character respawn
local function onCharacterAdded(character)
    wait(getgenv().Time)

    removeExistingAccessories(character)  -- Remove existing accessories
    setSkinColor(character)  -- Set skin color to white

    for _, accessoryId in ipairs(getgenv().Head) do
        addAccessoryToCharacter(accessoryId, character.Head)
    end

    for _, accessoryId in ipairs(getgenv().Torso) do
        addAccessoryToCharacter(accessoryId, character:FindFirstChild("UpperTorso") or character:FindFirstChild("Torso"))
    end
end

-- Function to handle player death
local function onCharacterDied()
    local character = player.Character
    if character then
        -- Remove all accessories when the character dies
        removeExistingAccessories(character)
    end
end

-- Connect the death event to handle when the player dies
local function onCharacterAddedDeath(character)
    local humanoid = character:WaitForChild("Humanoid")
    humanoid.Died:Connect(onCharacterDied)
end

-- Initial connection for when the script runs
if player.Character then
    onCharacterAdded(player.Character)
    onCharacterAddedDeath(player.Character)
end

player.CharacterAdded:Connect(function(character)
    onCharacterAdded(character)
    onCharacterAddedDeath(character)
end)








local ts = game:GetService("TweenService")
local Dialogue = Instance.new("BillboardGui")
local Chat1 = Instance.new("Frame")
local Sub = Instance.new("TextLabel")

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Setting up the Dialogue GUI
Dialogue.Active = true
Dialogue.Size = UDim2.new(15, 0, 15, 0)
Dialogue.StudsOffset = Vector3.new(0, 0, 2)
Dialogue.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
Dialogue.Name = "Dialogue"
Dialogue.Parent = humanoidRootPart

-- Setting up the Chat1 Frame
Chat1.AnchorPoint = Vector2.new(0.5, 0.5)
Chat1.BackgroundColor3 = Color3.new(1, 1, 1)
Chat1.BorderColor3 = Color3.new(0, 0, 0)
Chat1.BorderSizePixel = 2
Chat1.Position = UDim2.new(0.600000024, 0, -0.2, 0)
Chat1.Size = UDim2.new(0.100000001, 0, 0.200000003, 0)
Chat1.Name = "Chat1"
Chat1.BackgroundTransparency = 1
Chat1.Parent = Dialogue

-- Setting up the Sub TextLabel
Sub.FontFace = Font.new("rbxassetid://12187375716", Enum.FontWeight.Bold, Enum.FontStyle.Italic)
Sub.Text = "불타다."  -- Changed the text to "Pathetic."
Sub.TextColor3 = Color3.new(0, 0, 0)
Sub.TextScaled = true
Sub.TextSize = 14
Sub.TextWrapped = true
Sub.AnchorPoint = Vector2.new(0.5, 0.5)
Sub.BackgroundColor3 = Color3.new(1, 1, 1)
Sub.TextTransparency = 1
Sub.BorderColor3 = Color3.new(0, 0, 0)
Sub.BorderSizePixel = 0
Sub.Position = UDim2.new(0.5, 0, 0.5, 0)
Sub.Size = UDim2.new(0.850000024, 0, 0.349999994, 0)
Sub.Name = "Sub"
Sub.Parent = Chat1
Sub.BackgroundTransparency = 1

-- Define the tweenProperty function
local function tweenProperty(object, properties, time)
    local tweenInfo = TweenInfo.new(time)
    local tween = ts:Create(object, tweenInfo, properties)
    tween:Play()
end

game.Debris:AddItem(Dialogue, 25)
game.Debris:AddItem(Chat1, 25)
game.Debris:AddItem(Sub, 25)

-- Apply tweens
tweenProperty(Chat1, {BackgroundTransparency = 0}, 1)
tweenProperty(Sub, {TextTransparency = 0}, 1)
tweenProperty(Chat1, {Position = UDim2.new(0.6, 0, 0.4, 0)}, 1)

-- Wait for 2 seconds before fading out
task.wait(2)

-- Apply fade-out tweens
tweenProperty(Chat1, {BackgroundTransparency = 1}, 2)
tweenProperty(Sub, {TextTransparency = 1}, 2)











-- Move 1
local assetId = 93932506217938 -- The Asset ID to use 
local animationId = "10468665991" -- Place your new anim id here

-- Function to create the effect at the bottom of the right arm
local function createEffect()
    local player = game.Players.LocalPlayer
    local character = player and player.Character

    if character then
        -- Create and add the effect asset
        local effect = game:GetObjects("rbxassetid://" .. assetId)[1]
        if effect then
            effect.Parent = character
            
            -- Set properties for the effect
            effect.CanCollide = false -- No collision for the effect
            effect.Anchored = false -- Make it unanchored

            -- Position the effect at the bottom of the right arm
            local rightArm = character:FindFirstChild("RightArm") or character:FindFirstChild("Right Arm")
            if rightArm then
                effect.CFrame = rightArm.CFrame * CFrame.new(0, -rightArm.Size.Y / 2, 0) -- Position at the bottom

                -- Create a weld to keep the effect attached
                local weld = Instance.new("Weld")
                weld.Part0 = rightArm
                weld.Part1 = effect
                weld.C0 = CFrame.new(0, 0, 0) -- Adjust the offset if necessary
                weld.Parent = rightArm -- Parent the weld to the right arm

                -- change how much the vfx lasts for
                wait(1)
                effect:Destroy() -- Clean up the effect
                weld:Destroy() -- Remove the weld
            else
                warn("Right arm not found!") -- Debugging information
            end
        else
            warn("Effect asset could not be loaded!") -- Debugging information
        end
    else
        warn("Character not found!") -- Debugging information
    end
end

-- THE ACTUAL ANIMATION
-- Function to handle animation with optional start time
function onAnimation(id, func, startTime)
    local id = tostring(id):gsub("rbxassetid://", "")
    local char = game.Players.LocalPlayer.Character
    local humanoid = char and char:WaitForChild("Humanoid", 1)

    if char and humanoid then
        humanoid.AnimationPlayed:Connect(function(v)
            local vID = v.Animation.AnimationId:gsub("rbxassetid://", "")
            if id == vID then
                if startTime then
                    -- Skip to the specific time in the animation
                    v.TimePosition = startTime
                end
                func(v)
            end
        end)
    end

    game.Players.LocalPlayer.CharacterAdded:Connect(function(char)
        local humanoid = char and char:WaitForChild("Humanoid", 1)
        if char and humanoid then
            humanoid.AnimationPlayed:Connect(function(v)
                local vID = v.Animation.AnimationId:gsub("rbxassetid://", "")
                if id == vID then
                    if startTime then
                        -- Skip to the specific time in the animation
                        v.TimePosition = startTime
                    end
                    func(v)
                end
            end)
        end
    end)
end

-- Detect animation, stop the old animation, and replace it with the new one
onAnimation("10468665991", function(animationTrack) -- place old anim here
    local player = game.Players.LocalPlayer
    local char = player.Character or player.CharacterAdded:Wait()
    local humanoid = char:WaitForChild("Humanoid")

    -- Stop the old animation
    if animationTrack then
        animationTrack:Stop() -- This will stop the old animation
    end

    -- Delay before playing the new animation
    local delayBeforeNewAnim = 0 -- Change this value to adjust delay
    wait(delayBeforeNewAnim)

    -- Create the new animation instance
    local newAnimation = Instance.new("Animation")
    newAnimation.AnimationId = "rbxassetid://128022763591042" -- place new anim here

    -- Load and play the new animation
    local newAnimTrack = humanoid:LoadAnimation(newAnimation)

    -- Adjust the speed of the animation
    newAnimTrack:Play()
    newAnimTrack:AdjustSpeed(1.4) -- Adjust speed as needed

    -- Set the starting point of the new animation (if desired)
    local startTime = 0 -- Change this to skip to a specific second
    newAnimTrack.TimePosition = startTime

    -- Option to stop animation after a specific time in seconds
    local animDurationInSeconds = 5 -- Set the duration (in seconds) to stop the animation
    wait(animDurationInSeconds)
    
    newAnimTrack:Stop() -- Stop the animation after the specified duration
end)

-- Permanently disable the script on player death
local char = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
local humanoid = char:WaitForChild("Humanoid")

humanoid.Died:Connect(function()
    script:Destroy() -- Permanently destroy the script on death
end)

-- Connect the VFX creation to the animation event
local function onAnimation(animationTrack)
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        createEffect() -- Create the effect when the specified animation plays
    end
end

-- Connect the onAnimation function
local function setupAnimationListener()
    local player = game.Players.LocalPlayer
    local character = player and player.Character
    local humanoid = character and character:FindFirstChildOfClass("Humanoid")

    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimation)
    else
        warn("Humanoid not found!") -- Debugging information
    end
end

setupAnimationListener()

-- Handle character respawn
game.Players.LocalPlayer.CharacterAdded:Connect(setupAnimationListener)








-- Move 2
local assetId = 100889126147856   -- The Asset ID to use 
local animationId = "10466974800" -- Place your new anim id here

-- Function to create the effect at the bottom of the right arm
local function createEffect()
    local player = game.Players.LocalPlayer
    local character = player and player.Character

    if character then
        -- Create and add the effect asset
        local effect = game:GetObjects("rbxassetid://" .. assetId)[1]
        if effect then
            effect.Parent = character
            
            -- Set properties for the effect
            effect.CanCollide = false -- No collision for the effect
            effect.Anchored = false -- Make it unanchored

            -- Position the effect at the bottom of the right arm
            local rightArm = character:FindFirstChild("RightArm") or character:FindFirstChild("Right Arm")
            if rightArm then
                effect.CFrame = rightArm.CFrame * CFrame.new(0, -rightArm.Size.Y / 2, 0) -- Position at the bottom

                -- Create a weld to keep the effect attached
                local weld = Instance.new("Weld")
                weld.Part0 = rightArm
                weld.Part1 = effect
                weld.C0 = CFrame.new(0, 0, 0) -- Adjust the offset if necessary
                weld.Parent = rightArm -- Parent the weld to the right arm

                -- change how much the vfx lasts for
                wait(1.8)
                effect:Destroy() -- Clean up the effect
                weld:Destroy() -- Remove the weld
            else
                warn("Right arm not found!") -- Debugging information
            end
        else
            warn("Effect asset could not be loaded!") -- Debugging information
        end
    else
        warn("Character not found!") -- Debugging information
    end
end

-- THE ACTUAL ANIMATION
-- Function to handle animation with optional start time
function onAnimation(id, func, startTime)
    local id = tostring(id):gsub("rbxassetid://", "")
    local char = game.Players.LocalPlayer.Character
    local humanoid = char and char:WaitForChild("Humanoid", 1)

    if char and humanoid then
        humanoid.AnimationPlayed:Connect(function(v)
            local vID = v.Animation.AnimationId:gsub("rbxassetid://", "")
            if id == vID then
                if startTime then
                    -- Skip to the specific time in the animation
                    v.TimePosition = startTime
                end
                func(v)
            end
        end)
    end

    game.Players.LocalPlayer.CharacterAdded:Connect(function(char)
        local humanoid = char and char:WaitForChild("Humanoid", 1)
        if char and humanoid then
            humanoid.AnimationPlayed:Connect(function(v)
                local vID = v.Animation.AnimationId:gsub("rbxassetid://", "")
                if id == vID then
                    if startTime then
                        -- Skip to the specific time in the animation
                        v.TimePosition = startTime
                    end
                    func(v)
                end
            end)
        end
    end)
end

-- Detect animation, stop the old animation, and replace it with the new one
onAnimation("10466974800", function(animationTrack) -- place old anim here
    local player = game.Players.LocalPlayer
    local char = player.Character or player.CharacterAdded:Wait()
    local humanoid = char:WaitForChild("Humanoid")

    -- Stop the old animation
    if animationTrack then
        animationTrack:Stop() -- This will stop the old animation
    end

    -- Delay before playing the new animation
    local delayBeforeNewAnim = 0 -- Change this value to adjust delay
    wait(delayBeforeNewAnim)

    -- Create the new animation instance
    local newAnimation = Instance.new("Animation")
    newAnimation.AnimationId = "rbxassetid://18896229321" -- place new anim here

    -- Load and play the new animation
    local newAnimTrack = humanoid:LoadAnimation(newAnimation)

    -- Adjust the speed of the animation
    newAnimTrack:Play()
    newAnimTrack:AdjustSpeed(1) -- Adjust speed as needed

    -- Set the starting point of the new animation (if desired)
    local startTime = 2 -- Change this to skip to a specific second
    newAnimTrack.TimePosition = startTime

    -- Option to stop animation after a specific time in seconds
    local animDurationInSeconds = 1.8 -- Set the duration (in seconds) to stop the animation
    wait(animDurationInSeconds)
    
    newAnimTrack:Stop() -- Stop the animation after the specified duration
end)

-- Permanently disable the script on player death
local char = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
local humanoid = char:WaitForChild("Humanoid")

humanoid.Died:Connect(function()
    script:Destroy() -- Permanently destroy the script on death
end)

-- Connect the VFX creation to the animation event
local function onAnimation(animationTrack)
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        createEffect() -- Create the effect when the specified animation plays
    end
end

-- Connect the onAnimation function
local function setupAnimationListener()
    local player = game.Players.LocalPlayer
    local character = player and player.Character
    local humanoid = character and character:FindFirstChildOfClass("Humanoid")

    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimation)
    else
        warn("Humanoid not found!") -- Debugging information
    end
end

setupAnimationListener()

-- Handle character respawn
game.Players.LocalPlayer.CharacterAdded:Connect(setupAnimationListener)








-- Move 3
local assetId = 92872235255617 -- The Asset ID to use 
local animationId = "10471336737" -- Place your new anim id here

-- Function to create the effect at the bottom of the right arm
local function createEffect()
    local player = game.Players.LocalPlayer
    local character = player and player.Character

    if character then
        -- Create and add the effect asset
        local effect = game:GetObjects("rbxassetid://" .. assetId)[1]
        if effect then
            effect.Parent = character
            
            -- Set properties for the effect
            effect.CanCollide = false -- No collision for the effect
            effect.Anchored = false -- Make it unanchored

            -- Position the effect at the bottom of the right arm
            local rightArm = character:FindFirstChild("RightArm") or character:FindFirstChild("Right Arm")
            if rightArm then
                effect.CFrame = rightArm.CFrame * CFrame.new(0, -rightArm.Size.Y / 2, 0) -- Position at the bottom

                -- Create a weld to keep the effect attached
                local weld = Instance.new("Weld")
                weld.Part0 = rightArm
                weld.Part1 = effect
                weld.C0 = CFrame.new(0, 0, 0) -- Adjust the offset if necessary
                weld.Parent = rightArm -- Parent the weld to the right arm

                -- change how much the vfx lasts for
                wait(0.7)
                effect:Destroy() -- Clean up the effect
                weld:Destroy() -- Remove the weld
            else
                warn("Right arm not found!") -- Debugging information
            end
        else
            warn("Effect asset could not be loaded!") -- Debugging information
        end
    else
        warn("Character not found!") -- Debugging information
    end
end

-- THE ACTUAL ANIMATION
-- Function to handle animation with optional start time
function onAnimation(id, func, startTime)
    local id = tostring(id):gsub("rbxassetid://", "")
    local char = game.Players.LocalPlayer.Character
    local humanoid = char and char:WaitForChild("Humanoid", 1)

    if char and humanoid then
        humanoid.AnimationPlayed:Connect(function(v)
            local vID = v.Animation.AnimationId:gsub("rbxassetid://", "")
            if id == vID then
                if startTime then
                    -- Skip to the specific time in the animation
                    v.TimePosition = startTime
                end
                func(v)
            end
        end)
    end

    game.Players.LocalPlayer.CharacterAdded:Connect(function(char)
        local humanoid = char and char:WaitForChild("Humanoid", 1)
        if char and humanoid then
            humanoid.AnimationPlayed:Connect(function(v)
                local vID = v.Animation.AnimationId:gsub("rbxassetid://", "")
                if id == vID then
                    if startTime then
                        -- Skip to the specific time in the animation
                        v.TimePosition = startTime
                    end
                    func(v)
                end
            end)
        end
    end)
end

-- Detect animation, stop the old animation, and replace it with the new one
onAnimation("10471336737", function(animationTrack) -- place old anim here
    local player = game.Players.LocalPlayer
    local char = player.Character or player.CharacterAdded:Wait()
    local humanoid = char:WaitForChild("Humanoid")

    -- Stop the old animation
    if animationTrack then
        animationTrack:Stop() -- This will stop the old animation
    end

    -- Delay before playing the new animation
    local delayBeforeNewAnim = 0 -- Change this value to adjust delay
    wait(delayBeforeNewAnim)

    -- Create the new animation instance
    local newAnimation = Instance.new("Animation")
    newAnimation.AnimationId = "rbxassetid://18896229321" -- place new anim here

    -- Load and play the new animation
    local newAnimTrack = humanoid:LoadAnimation(newAnimation)

    -- Adjust the speed of the animation
    newAnimTrack:Play()
    newAnimTrack:AdjustSpeed(1) -- Adjust speed as needed

    -- Set the starting point of the new animation (if desired)
    local startTime = 0 -- Change this to skip to a specific second
    newAnimTrack.TimePosition = startTime

    -- Option to stop animation after a specific time in seconds
    local animDurationInSeconds = 0.8 -- Set the duration (in seconds) to stop the animation
    wait(animDurationInSeconds)
    
    newAnimTrack:Stop() -- Stop the animation after the specified duration
end)

-- Permanently disable the script on player death
local char = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
local humanoid = char:WaitForChild("Humanoid")

humanoid.Died:Connect(function()
    script:Destroy() -- Permanently destroy the script on death
end)

-- Connect the VFX creation to the animation event
local function onAnimation(animationTrack)
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        createEffect() -- Create the effect when the specified animation plays
    end
end

-- Connect the onAnimation function
local function setupAnimationListener()
    local player = game.Players.LocalPlayer
    local character = player and player.Character
    local humanoid = character and character:FindFirstChildOfClass("Humanoid")

    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimation)
    else
        warn("Humanoid not found!") -- Debugging information
    end
end

setupAnimationListener()

-- Handle character respawn
game.Players.LocalPlayer.CharacterAdded:Connect(setupAnimationListener)








-- Move 4
local assetId = 108751411021402 -- The Asset ID to use 
local animationId = "12510170988" -- Place your new anim id here

-- Function to create the effect at the bottom of the right arm
local function createEffect()
    local player = game.Players.LocalPlayer
    local character = player and player.Character

    if character then
        -- Create and add the effect asset
        local effect = game:GetObjects("rbxassetid://" .. assetId)[1]
        if effect then
            effect.Parent = character
            
            -- Set properties for the effect
            effect.CanCollide = false -- No collision for the effect
            effect.Anchored = false -- Make it unanchored

            -- Position the effect at the bottom of the right arm
            local rightArm = character:FindFirstChild("RightArm") or character:FindFirstChild("Right Arm")
            if rightArm then
                effect.CFrame = rightArm.CFrame * CFrame.new(0, -rightArm.Size.Y / 2, 0) -- Position at the bottom

                -- Create a weld to keep the effect attached
                local weld = Instance.new("Weld")
                weld.Part0 = rightArm
                weld.Part1 = effect
                weld.C0 = CFrame.new(0, 0, 0) -- Adjust the offset if necessary
                weld.Parent = rightArm -- Parent the weld to the right arm

                -- change how much the vfx lasts for
                wait(0.83)
                effect:Destroy() -- Clean up the effect
                weld:Destroy() -- Remove the weld
            else
                warn("Right arm not found!") -- Debugging information
            end
        else
            warn("Effect asset could not be loaded!") -- Debugging information
        end
    else
        warn("Character not found!") -- Debugging information
    end
end

-- THE ACTUAL ANIMATION
-- Function to handle animation with optional start time
function onAnimation(id, func, startTime)
    local id = tostring(id):gsub("rbxassetid://", "")
    local char = game.Players.LocalPlayer.Character
    local humanoid = char and char:WaitForChild("Humanoid", 1)

    if char and humanoid then
        humanoid.AnimationPlayed:Connect(function(v)
            local vID = v.Animation.AnimationId:gsub("rbxassetid://", "")
            if id == vID then
                if startTime then
                    -- Skip to the specific time in the animation
                    v.TimePosition = startTime
                end
                func(v)
            end
        end)
    end

    game.Players.LocalPlayer.CharacterAdded:Connect(function(char)
        local humanoid = char and char:WaitForChild("Humanoid", 1)
        if char and humanoid then
            humanoid.AnimationPlayed:Connect(function(v)
                local vID = v.Animation.AnimationId:gsub("rbxassetid://", "")
                if id == vID then
                    if startTime then
                        -- Skip to the specific time in the animation
                        v.TimePosition = startTime
                    end
                    func(v)
                end
            end)
        end
    end)
end

-- Detect animation, stop the old animation, and replace it with the new one
onAnimation("12510170988", function(animationTrack) -- place old anim here
    local player = game.Players.LocalPlayer
    local char = player.Character or player.CharacterAdded:Wait()
    local humanoid = char:WaitForChild("Humanoid")

    -- Stop the old animation
    if animationTrack then
        animationTrack:Stop() -- This will stop the old animation
    end

    -- Delay before playing the new animation
    local delayBeforeNewAnim = 0 -- Change this value to adjust delay
    wait(delayBeforeNewAnim)

    -- Create the new animation instance
    local newAnimation = Instance.new("Animation")
    newAnimation.AnimationId = "rbxassetid://129651400898906" -- place new anim here

    -- Load and play the new animation
    local newAnimTrack = humanoid:LoadAnimation(newAnimation)

    -- Adjust the speed of the animation
    newAnimTrack:Play()
    newAnimTrack:AdjustSpeed(1) -- Adjust speed as needed

    -- Set the starting point of the new animation (if desired)
    local startTime = 0 -- Change this to skip to a specific second
    newAnimTrack.TimePosition = startTime

    -- Option to stop animation after a specific time in seconds
    local animDurationInSeconds = 0.83 -- Set the duration (in seconds) to stop the animation
    wait(animDurationInSeconds)
    
    newAnimTrack:Stop() -- Stop the animation after the specified duration
end)

-- Permanently disable the script on player death
local char = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
local humanoid = char:WaitForChild("Humanoid")

humanoid.Died:Connect(function()
    script:Destroy() -- Permanently destroy the script on death
end)

-- Connect the VFX creation to the animation event
local function onAnimation(animationTrack)
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        createEffect() -- Create the effect when the specified animation plays
    end
end

-- Connect the onAnimation function
local function setupAnimationListener()
    local player = game.Players.LocalPlayer
    local character = player and player.Character
    local humanoid = character and character:FindFirstChildOfClass("Humanoid")

    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimation)
    else
        warn("Humanoid not found!") -- Debugging information
    end
end

setupAnimationListener()

-- Handle character respawn
game.Players.LocalPlayer.CharacterAdded:Connect(setupAnimationListener)









local assetId = 132636575858011 -- The Asset ID to use 
local animationId = "11365563255" -- Place your new anim id here

-- Function to create the effect at the bottom of the right arm
local function createEffect()
    local player = game.Players.LocalPlayer
    local character = player and player.Character

    if character then
        -- Create and add the effect asset
        local effect = game:GetObjects("rbxassetid://" .. assetId)[1]
        if effect then
            effect.Parent = character
            
            -- Set properties for the effect
            effect.CanCollide = false -- No collision for the effect
            effect.Anchored = false -- Make it unanchored

            -- Position the effect at the bottom of the right arm
            local rightArm = character:FindFirstChild("RightArm") or character:FindFirstChild("Right Arm")
            if rightArm then
                effect.CFrame = rightArm.CFrame * CFrame.new(0, -rightArm.Size.Y / 2, 0) -- Position at the bottom

                -- Create a weld to keep the effect attached
                local weld = Instance.new("Weld")
                weld.Part0 = rightArm
                weld.Part1 = effect
                weld.C0 = CFrame.new(80, -30, 100) -- Adjust the offset if necessary
                weld.Parent = rightArm -- Parent the weld to the right arm

                -- change how much the vfx lasts for
                wait(7)
                effect:Destroy() -- Clean up the effect
                weld:Destroy() -- Remove the weld
            else
                warn("Right arm not found!") -- Debugging information
            end
        else
            warn("Effect asset could not be loaded!") -- Debugging information
        end
    else
        warn("Character not found!") -- Debugging information
    end
end

-- THE ACTUAL ANIMATION
-- Function to handle animation with optional start time
function onAnimation(id, func, startTime)
    local id = tostring(id):gsub("rbxassetid://", "")
    local char = game.Players.LocalPlayer.Character
    local humanoid = char and char:WaitForChild("Humanoid", 1)

    if char and humanoid then
        humanoid.AnimationPlayed:Connect(function(v)
            local vID = v.Animation.AnimationId:gsub("rbxassetid://", "")
            if id == vID then
                if startTime then
                    -- Skip to the specific time in the animation
                    v.TimePosition = startTime
                end
                func(v)
            end
        end)
    end

    game.Players.LocalPlayer.CharacterAdded:Connect(function(char)
        local humanoid = char and char:WaitForChild("Humanoid", 1)
        if char and humanoid then
            humanoid.AnimationPlayed:Connect(function(v)
                local vID = v.Animation.AnimationId:gsub("rbxassetid://", "")
                if id == vID then
                    if startTime then
                        -- Skip to the specific time in the animation
                        v.TimePosition = startTime
                    end
                    func(v)
                end
            end)
        end
    end)
end

-- Detect animation, stop the old animation, and replace it with the new one
onAnimation("11365563255", function(animationTrack) -- place old anim here
    local player = game.Players.LocalPlayer
    local char = player.Character or player.CharacterAdded:Wait()
    local humanoid = char:WaitForChild("Humanoid")

    -- Stop the old animation
    if animationTrack then
        animationTrack:Stop() -- This will stop the old animation
    end

    -- Delay before playing the new animation
    local delayBeforeNewAnim = 0 -- Change this value to adjust delay
    wait(delayBeforeNewAnim)

    -- Create the new animation instance
    local newAnimation = Instance.new("Animation")
    newAnimation.AnimationId = "rbxassetid://18897553669" -- place new anim here

    -- Load and play the new animation
    local newAnimTrack = humanoid:LoadAnimation(newAnimation)

    -- Adjust the speed of the animation
    newAnimTrack:Play()
    newAnimTrack:AdjustSpeed(1) -- Adjust speed as needed

    -- Set the starting point of the new animation (if desired)
    local startTime = 0 -- Change this to skip to a specific second
    newAnimTrack.TimePosition = startTime

    -- Option to stop animation after a specific time in seconds
    local animDurationInSeconds = 10 -- Set the duration (in seconds) to stop the animation
    wait(animDurationInSeconds)
    
    newAnimTrack:Stop() -- Stop the animation after the specified duration
end)

-- Permanently disable the script on player death
local char = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
local humanoid = char:WaitForChild("Humanoid")

humanoid.Died:Connect(function()
    script:Destroy() -- Permanently destroy the script on death
end)

-- Connect the VFX creation to the animation event
local function onAnimation(animationTrack)
    if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
        createEffect() -- Create the effect when the specified animation plays
    end
end

-- Connect the onAnimation function
local function setupAnimationListener()
    local player = game.Players.LocalPlayer
    local character = player and player.Character
    local humanoid = character and character:FindFirstChildOfClass("Humanoid")

    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimation)
    else
        warn("Humanoid not found!") -- Debugging information
    end
end

setupAnimationListener()

-- Handle character respawn
game.Players.LocalPlayer.CharacterAdded:Connect(setupAnimationListener)









    local assetId = 81707374873537 -- The Asset ID to use 
    local animationId = "11365563255" -- Place your new anim id here

    -- Function to create the effect at the bottom of the right arm
    local function createEffect()
        local player = game.Players.LocalPlayer
        local character = player and player.Character

        if character then
            -- Create and add the effect asset
            local effect = game:GetObjects("rbxassetid://" .. assetId)[1]
            if effect then
                effect.Parent = character
                
                -- Set properties for the effect
                effect.CanCollide = false -- No collision for the effect
                effect.Anchored = false -- Make it unanchored

                -- Position the effect at the bottom of the right arm
                local rightArm = character:FindFirstChild("RightArm") or character:FindFirstChild("Right Arm")
                if rightArm then
                    effect.CFrame = rightArm.CFrame * CFrame.new(0, -rightArm.Size.Y / 2, 0) -- Position at the bottom
                    wait(6.2)
                    -- Create a weld to keep the effect attached
                    local weld = Instance.new("Weld")
                    weld.Part0 = rightArm
                    weld.Part1 = effect
                    weld.C0 = CFrame.new(80, -30, 100) -- Adjust the offset if necessary
                    weld.Parent = rightArm -- Parent the weld to the right arm

                    -- change how much the vfx lasts for
                    wait(3.8)
                    effect:Destroy() -- Clean up the effect
                    weld:Destroy() -- Remove the weld
                else
                    warn("Right arm not found!") -- Debugging information
                end
            else
                warn("Effect asset could not be loaded!") -- Debugging information
            end
        else
            warn("Character not found!") -- Debugging information
        end
    end

    -- THE ACTUAL ANIMATION
    -- Function to handle animation with optional start time
    function onAnimation(id, func, startTime)
        local id = tostring(id):gsub("rbxassetid://", "")
        local char = game.Players.LocalPlayer.Character
        local humanoid = char and char:WaitForChild("Humanoid", 1)

        if char and humanoid then
            humanoid.AnimationPlayed:Connect(function(v)
                local vID = v.Animation.AnimationId:gsub("rbxassetid://", "")
                if id == vID then
                    if startTime then
                        -- Skip to the specific time in the animation
                        v.TimePosition = startTime
                    end
                    func(v)
                end
            end)
        end

        game.Players.LocalPlayer.CharacterAdded:Connect(function(char)
            local humanoid = char and char:WaitForChild("Humanoid", 1)
            if char and humanoid then
                humanoid.AnimationPlayed:Connect(function(v)
                    local vID = v.Animation.AnimationId:gsub("rbxassetid://", "")
                    if id == vID then
                        if startTime then
                            -- Skip to the specific time in the animation
                            v.TimePosition = startTime
                        end
                        func(v)
                    end
                end)
            end
        end)
    end

    -- Detect animation, stop the old animation, and replace it with the new one
    onAnimation("11365563255", function(animationTrack) -- place old anim here
        local player = game.Players.LocalPlayer
        local char = player.Character or player.CharacterAdded:Wait()
        local humanoid = char:WaitForChild("Humanoid")

        -- Stop the old animation
        if animationTrack then
            animationTrack:Stop() -- This will stop the old animation
        end

        -- Delay before playing the new animation
        local delayBeforeNewAnim = 0 -- Change this value to adjust delay
        wait(delayBeforeNewAnim)

        -- Create the new animation instance
        local newAnimation = Instance.new("Animation")
        newAnimation.AnimationId = "rbxassetid://18897553669" -- place new anim here

        -- Load and play the new animation
        local newAnimTrack = humanoid:LoadAnimation(newAnimation)

        -- Adjust the speed of the animation
        newAnimTrack:Play()
        newAnimTrack:AdjustSpeed(1) -- Adjust speed as needed

        -- Set the starting point of the new animation (if desired)
        local startTime = 0 -- Change this to skip to a specific second
        newAnimTrack.TimePosition = startTime

        -- Option to stop animation after a specific time in seconds
        local animDurationInSeconds = 10 -- Set the duration (in seconds) to stop the animation
        wait(animDurationInSeconds)
        
        newAnimTrack:Stop() -- Stop the animation after the specified duration
    end)

    -- Permanently disable the script on player death
    local char = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
    local humanoid = char:WaitForChild("Humanoid")

    humanoid.Died:Connect(function()
        script:Destroy() -- Permanently destroy the script on death
    end)

    -- Connect the VFX creation to the animation event
    local function onAnimation(animationTrack)
        if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
            createEffect() -- Create the effect when the specified animation plays
        end
    end

    -- Connect the onAnimation function
    local function setupAnimationListener()
        local player = game.Players.LocalPlayer
        local character = player and player.Character
        local humanoid = character and character:FindFirstChildOfClass("Humanoid")

        if humanoid then
            humanoid.AnimationPlayed:Connect(onAnimation)
        else
            warn("Humanoid not found!") -- Debugging information
        end
    end

    setupAnimationListener()

    -- Handle character respawn
    game.Players.LocalPlayer.CharacterAdded:Connect(setupAnimationListener)









-- Services
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local player = Players.LocalPlayer
local camera = workspace.CurrentCamera

-- Animation ID to listen for
local animationId = "12983333733"

-- Function to anchor the HumanoidRootPart
local function anchorRootPart(state)
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if humanoidRootPart then
        humanoidRootPart.Anchored = state
    end
end

-- Function to tilt the character upwards for 10 seconds
local function tiltCharacter(duration)
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

    if not humanoidRootPart then return end

    local originalCFrame = humanoidRootPart.CFrame
    local tiltCFrame = originalCFrame * CFrame.Angles(math.rad(20), 0, 0)

    -- Anchor and tilt character
    anchorRootPart(true)
    local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
    local tiltTween = TweenService:Create(humanoidRootPart, tweenInfo, { CFrame = tiltCFrame })
    tiltTween:Play()

    -- Wait for 10 seconds before resetting
    task.delay(duration, function()
        if humanoidRootPart then
            humanoidRootPart.CFrame = originalCFrame
            anchorRootPart(false) -- Unanchor when the animation ends
        end
    end)
end

-- Function to adjust the camera FOV
local function setFOV(value)
    local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
    local fovTween = TweenService:Create(camera, tweenInfo, { FieldOfView = value })
    fovTween:Play()
end

-- Function to trigger effects when the animation starts
local function onAnimation(animation)
    local duration = 10 -- Set to 10 seconds

    -- Set FOV to 90 when animation starts
    setFOV(90)

    -- Tilt character
    tiltCharacter(duration)

    -- Reset FOV to default after animation ends
    task.delay(duration, function()
        setFOV(70)
    end)
end

-- Function to listen for the animation being played
local function onAnimationPlayed(id, func)
    id = tostring(id):gsub("rbxassetid://", "")

    local function connectAnimation(humanoid)
        humanoid.AnimationPlayed:Connect(function(animation)
            local animationIdPlayed = animation.Animation.AnimationId:gsub("rbxassetid://", "")
            if animationIdPlayed == id then
                func(animation)
            end
        end)
    end

    -- Connect animation to current character
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:FindFirstChild("Humanoid")
    if humanoid then
        connectAnimation(humanoid)
    end

    -- Listen for new character (to persist after death)
    player.CharacterAdded:Connect(function(newCharacter)
        local newHumanoid = newCharacter:WaitForChild("Humanoid")
        connectAnimation(newHumanoid)
    end)
end

-- Listen for animation with ID 10468665991
onAnimationPlayed(animationId, onAnimation)










-- Services
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local Lighting = game:GetService("Lighting")
local player = Players.LocalPlayer
local camera = workspace.CurrentCamera

-- Animation ID to listen for
local animationId = "10468665991"

-- Function to handle the screen flash (invert colors)
local function flashScreen()
    -- Set up invert colors effect
    local colorCorrection = Instance.new("ColorCorrectionEffect")
    colorCorrection.Contrast = -2 -- Invert the colors
    colorCorrection.TintColor = Color3.new(3, 0, 0)
    colorCorrection.Parent = Lighting

    -- Tween to smoothly remove the effect after 0.3 seconds
    local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
    local tween = TweenService:Create(colorCorrection, tweenInfo, { Contrast = 0 })
    tween:Play()

    -- Destroy the effect after the tween completes
    tween.Completed:Connect(function()
        colorCorrection:Destroy()
    end)
end

-- Function to handle camera shake (heartbeat effect)
local function cameraShake()
    local originalCFrame = camera.CFrame

    for i = 1, 3 do
        -- Slight shake (heartbeat effect)
        camera.CFrame = camera.CFrame * CFrame.new(math.random(-1, 1) * 0.2, math.random(-1, 1) * 0.2, math.random(-1, 1) * 0.2)
        wait(0.1) -- Timing between shakes
    end

    -- Reset camera back to original position
    camera.CFrame = originalCFrame
end

-- Function to anchor the HumanoidRootPart
local function anchorRootPart(state)
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    
    -- Anchor or unanchor the HumanoidRootPart
    humanoidRootPart.Anchored = state
end

-- Function to tilt the character 20 degrees upward for 0.7 seconds and anchor it
local function tiltCharacter()
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    
    -- Rotate 20 degrees upward
    local originalCFrame = humanoidRootPart.CFrame
    local tiltCFrame = originalCFrame * CFrame.Angles(math.rad(20), 0, 0)

    -- Anchor the HumanoidRootPart before tilting
    anchorRootPart(true)

    -- Tween the character to tilt up
    local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
    local tween = TweenService:Create(humanoidRootPart, tweenInfo, { CFrame = tiltCFrame })
    tween:Play()

    -- After 0.7 seconds, return the character to the original orientation and unanchor
    tween.Completed:Connect(function()
        wait(0.5)
        humanoidRootPart.CFrame = originalCFrame
        anchorRootPart(false) -- Unanchor the HumanoidRootPart after the tilt is done
    end)
end

-- Function to trigger effects on animation play
local function onAnimation(animation)
    -- Play effects (flash screen, camera shake, and tilt character with anchoring)
    flashScreen()
    cameraShake()
    tiltCharacter()
end

-- Function to listen for the animation being played
local function onAnimationPlayed(id, func)
    id = tostring(id):gsub("rbxassetid://", "")
    
    local function connectAnimation(humanoid)
        humanoid.AnimationPlayed:Connect(function(animation)
            local animationIdPlayed = animation.Animation.AnimationId:gsub("rbxassetid://", "")
            if animationIdPlayed == id then
                func(animation)
            end
        end)
    end

    -- Connect animation to current character
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")
    connectAnimation(humanoid)

    -- Listen for new character (to persist after death)
    player.CharacterAdded:Connect(function(newCharacter)
        humanoid = newCharacter:WaitForChild("Humanoid")
        connectAnimation(humanoid)
    end)
end

-- Listen for animation with ID 10468665991
onAnimationPlayed(animationId, onAnimation)









-- Services
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local Lighting = game:GetService("Lighting")
local player = Players.LocalPlayer
local camera = workspace.CurrentCamera

-- Animation ID to listen for
local animationId = "10471336737"

-- Function to handle the screen flash (invert colors)
local function flashScreen()
    -- Set up invert colors effect
    local colorCorrection = Instance.new("ColorCorrectionEffect")
    colorCorrection.Contrast = -2 -- Invert the colors
    colorCorrection.TintColor = Color3.new(1, 0, 0)
    colorCorrection.Parent = Lighting

    -- Tween to smoothly remove the effect after 0.3 seconds
    local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
    local tween = TweenService:Create(colorCorrection, tweenInfo, { Contrast = 0 })
    tween:Play()

    -- Destroy the effect after the tween completes
    tween.Completed:Connect(function()
        colorCorrection:Destroy()
    end)
end

-- Function to handle camera shake (heartbeat effect)
local function cameraShake()
    local originalCFrame = camera.CFrame

    for i = 1, 3 do
        -- Slight shake (heartbeat effect)
        camera.CFrame = camera.CFrame * CFrame.new(math.random(-1, 1) * 0.2, math.random(-1, 1) * 0.2, math.random(-1, 1) * 0.2)
        wait(0.1) -- Timing between shakes
    end

    -- Reset camera back to original position
    camera.CFrame = originalCFrame
end

-- Function to anchor the HumanoidRootPart
local function anchorRootPart(state)
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    
    -- Anchor or unanchor the HumanoidRootPart
    humanoidRootPart.Anchored = state
end

-- Function to tilt the character 20 degrees upward for 0.7 seconds and anchor it
local function tiltCharacter()
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    
    -- Rotate 20 degrees upward
    local originalCFrame = humanoidRootPart.CFrame
    local tiltCFrame = originalCFrame * CFrame.Angles(math.rad(0), 0, 0)

    -- Anchor the HumanoidRootPart before tilting
    anchorRootPart(true)

    -- Tween the character to tilt up
    local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
    local tween = TweenService:Create(humanoidRootPart, tweenInfo, { CFrame = tiltCFrame })
    tween:Play()

    -- After 0.7 seconds, return the character to the original orientation and unanchor
    tween.Completed:Connect(function()
        wait(0.01)
        humanoidRootPart.CFrame = originalCFrame
        anchorRootPart(false) -- Unanchor the HumanoidRootPart after the tilt is done
    end)
end

-- Function to trigger effects on animation play
local function onAnimation(animation)
    -- Play effects (flash screen, camera shake, and tilt character with anchoring)
    flashScreen()
    cameraShake()
    tiltCharacter()
end

-- Function to listen for the animation being played
local function onAnimationPlayed(id, func)
    id = tostring(id):gsub("rbxassetid://", "")
    
    local function connectAnimation(humanoid)
        humanoid.AnimationPlayed:Connect(function(animation)
            local animationIdPlayed = animation.Animation.AnimationId:gsub("rbxassetid://", "")
            if animationIdPlayed == id then
                func(animation)
            end
        end)
    end

    -- Connect animation to current character
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")
    connectAnimation(humanoid)

    -- Listen for new character (to persist after death)
    player.CharacterAdded:Connect(function(newCharacter)
        humanoid = newCharacter:WaitForChild("Humanoid")
        connectAnimation(humanoid)
    end)
end

-- Listen for animation with ID 10468665991
onAnimationPlayed(animationId, onAnimation)










local assetId = 0 -- The Asset ID to use 
local animationId = "12983333733" -- Place your new anim id here

    -- Function to create the effect at the bottom of the right arm
    local function createEffect()
        local player = game.Players.LocalPlayer
        local character = player and player.Character

        if character then
            -- Create and add the effect asset
            local effect = game:GetObjects("rbxassetid://" .. assetId)[1]
            if effect then
                effect.Parent = character
                
                -- Set properties for the effect
                effect.CanCollide = false -- No collision for the effect
                effect.Anchored = false -- Make it unanchored

                -- Position the effect at the bottom of the right arm
                local rightArm = character:FindFirstChild("RightArm") or character:FindFirstChild("Right Arm")
                if rightArm then
                    effect.CFrame = rightArm.CFrame * CFrame.new(0, -rightArm.Size.Y / 2, 0) -- Position at the bottom

                    -- Create a weld to keep the effect attached
                    local weld = Instance.new("Weld")
                    weld.Part0 = rightArm
                    weld.Part1 = effect
                    weld.C0 = CFrame.new(80, -30, -100) -- Adjust the offset if necessary
                    weld.Parent = rightArm -- Parent the weld to the right arm

                    -- change how much the vfx lasts for
                    wait(7)
                    effect:Destroy() -- Clean up the effect
                    weld:Destroy() -- Remove the weld
                else
                    warn("Right arm not found!") -- Debugging information
                end
            else
                warn("Effect asset could not be loaded!") -- Debugging information
            end
        else
            warn("Character not found!") -- Debugging information
        end
    end

    -- THE ACTUAL ANIMATION
    -- Function to handle animation with optional start time
    function onAnimation(id, func, startTime)
        local id = tostring(id):gsub("rbxassetid://", "")
        local char = game.Players.LocalPlayer.Character
        local humanoid = char and char:WaitForChild("Humanoid", 1)

        if char and humanoid then
            humanoid.AnimationPlayed:Connect(function(v)
                local vID = v.Animation.AnimationId:gsub("rbxassetid://", "")
                if id == vID then
                    if startTime then
                        -- Skip to the specific time in the animation
                        v.TimePosition = startTime
                    end
                    func(v)
                end
            end)
        end

        game.Players.LocalPlayer.CharacterAdded:Connect(function(char)
            local humanoid = char and char:WaitForChild("Humanoid", 1)
            if char and humanoid then
                humanoid.AnimationPlayed:Connect(function(v)
                    local vID = v.Animation.AnimationId:gsub("rbxassetid://", "")
                    if id == vID then
                        if startTime then
                            -- Skip to the specific time in the animation
                            v.TimePosition = startTime
                        end
                        func(v)
                    end
                end)
            end
        end)
    end

    -- Detect animation, stop the old animation, and replace it with the new one
    onAnimation("12983333733", function(animationTrack) -- place old anim here
        local player = game.Players.LocalPlayer
        local char = player.Character or player.CharacterAdded:Wait()
        local humanoid = char:WaitForChild("Humanoid")

        -- Stop the old animation
        if animationTrack then
            animationTrack:Stop() -- This will stop the old animation
        end

        -- Delay before playing the new animation
        local delayBeforeNewAnim = 0 -- Change this value to adjust delay
        wait(delayBeforeNewAnim)

        -- Create the new animation instance
        local newAnimation = Instance.new("Animation")
        newAnimation.AnimationId = "rbxassetid://17861840167" -- place new anim here

        -- Load and play the new animation
        local newAnimTrack = humanoid:LoadAnimation(newAnimation)

        -- Adjust the speed of the animation
        newAnimTrack:Play()
        newAnimTrack:AdjustSpeed(0.3) -- Adjust speed as needed

        -- Set the starting point of the new animation (if desired)
        local startTime = 0 -- Change this to skip to a specific second
        newAnimTrack.TimePosition = startTime

        -- Option to stop animation after a specific time in seconds
        local animDurationInSeconds = 10 -- Set the duration (in seconds) to stop the animation
        wait(animDurationInSeconds)
        
        newAnimTrack:Stop() -- Stop the animation after the specified duration
    end)

    -- Permanently disable the script on player death
    local char = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
    local humanoid = char:WaitForChild("Humanoid")

    humanoid.Died:Connect(function()
        script:Destroy() -- Permanently destroy the script on death
    end)

    -- Connect the VFX creation to the animation event
    local function onAnimation(animationTrack)
        if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
            createEffect() -- Create the effect when the specified animation plays
        end
    end

    -- Connect the onAnimation function
    local function setupAnimationListener()
        local player = game.Players.LocalPlayer
        local character = player and player.Character
        local humanoid = character and character:FindFirstChildOfClass("Humanoid")

        if humanoid then
            humanoid.AnimationPlayed:Connect(onAnimation)
        else
            warn("Humanoid not found!") -- Debugging information
        end
    end

    setupAnimationListener()

    -- Handle character respawn
    game.Players.LocalPlayer.CharacterAdded:Connect(setupAnimationListener)









local assetId = 80430260560537 -- Replace this with any asset ID for the model you want to load
local animationId = 17861840167 -- The animation that triggers the effect

local positionOffset = Vector3.new(0, 0, 0) -- Adjust these values to position the effect above the torso
local effectSize = Vector3.new(20, 20, 20) -- Set the size of the effect
local forwardOffset = 100 -- Adjust this to move the asset forward (positive) or backward (negative)
local rotationAngles = Vector3.new(0, math.rad(0), 0) -- Rotate the effect around the Y-axis by 90 degrees

-- Function to create and position the imported model
local function createEffect()
    local player = game.Players.LocalPlayer
    local character = player and player.Character

    if character then
        local success, effect = pcall(function()
            return game:GetObjects("rbxassetid://" .. assetId)[1]
        end)
        
        if success and effect then
            effect.Parent = character
            
            for _, part in ipairs(effect:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = false
                    part.Massless = true
                    part.Size = effectSize
                    part.CollisionMode = Enum.CollisionMode.None
                end
            end

            local torso = character:FindFirstChild("Torso") or character:FindFirstChild("UpperTorso")
            if torso then
                local torsoPosition = torso.Position + torso.CFrame.LookVector * forwardOffset
                local finalPosition = torsoPosition + positionOffset
                local rotationCFrame = CFrame.Angles(rotationAngles.X, rotationAngles.Y, rotationAngles.Z)
                local lookDirection = -torso.CFrame.LookVector
                effect.CFrame = CFrame.new(finalPosition, finalPosition + lookDirection) * rotationCFrame

                local motor = Instance.new("Motor6D")
                motor.Name = "EffectMotor"
                motor.Part0 = torso
                motor.Part1 = effect
                motor.C0 = torso.CFrame:inverse() * effect.CFrame
                motor.Parent = torso

                wait(9)
                effect:Destroy()
                motor:Destroy()
            else
                warn("Torso not found!")
            end
        else
            warn("Effect asset could not be loaded!")
        end
    else
        warn("Character not found!")
    end
end

local function onAnimationPlayed(track)
    if track.Animation and track.Animation.AnimationId == "rbxassetid://" .. animationId then
        createEffect()
    end
end

local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

local player = game.Players.LocalPlayer
player.CharacterAdded:Connect(onCharacterAdded)
if player.Character then
    onCharacterAdded(player.Character)
end









local assetId = 122531206427800 -- The Asset ID to use 
local animationId = "11343318134" -- Place your new anim id here

    -- Function to create the effect at the bottom of the right arm
    local function createEffect()
        local player = game.Players.LocalPlayer
        local character = player and player.Character

        if character then
            -- Create and add the effect asset
            local effect = game:GetObjects("rbxassetid://" .. assetId)[1]
            if effect then
                effect.Parent = character
                
                -- Set properties for the effect
                effect.CanCollide = false -- No collision for the effect
                effect.Anchored = false -- Make it unanchored

                -- Position the effect at the bottom of the right arm
                local rightArm = character:FindFirstChild("RightArm") or character:FindFirstChild("Right Arm")
                if rightArm then
                    effect.CFrame = rightArm.CFrame * CFrame.new(0, -rightArm.Size.Y / 2, 0) -- Position at the bottom

                    -- Create a weld to keep the effect attached
                    local weld = Instance.new("Weld")
                    weld.Part0 = rightArm
                    weld.Part1 = effect
                    weld.C0 = CFrame.new(0, 0, 0) -- Adjust the offset if necessary
                    weld.Parent = rightArm -- Parent the weld to the right arm

                    -- change how much the vfx lasts for
                    wait(7)
                    effect:Destroy() -- Clean up the effect
                    weld:Destroy() -- Remove the weld
                else
                    warn("Right arm not found!") -- Debugging information
                end
            else
                warn("Effect asset could not be loaded!") -- Debugging information
            end
        else
            warn("Character not found!") -- Debugging information
        end
    end

    -- THE ACTUAL ANIMATION
    -- Function to handle animation with optional start time
    function onAnimation(id, func, startTime)
        local id = tostring(id):gsub("rbxassetid://", "")
        local char = game.Players.LocalPlayer.Character
        local humanoid = char and char:WaitForChild("Humanoid", 1)

        if char and humanoid then
            humanoid.AnimationPlayed:Connect(function(v)
                local vID = v.Animation.AnimationId:gsub("rbxassetid://", "")
                if id == vID then
                    if startTime then
                        -- Skip to the specific time in the animation
                        v.TimePosition = startTime
                    end
                    func(v)
                end
            end)
        end

        game.Players.LocalPlayer.CharacterAdded:Connect(function(char)
            local humanoid = char and char:WaitForChild("Humanoid", 1)
            if char and humanoid then
                humanoid.AnimationPlayed:Connect(function(v)
                    local vID = v.Animation.AnimationId:gsub("rbxassetid://", "")
                    if id == vID then
                        if startTime then
                            -- Skip to the specific time in the animation
                            v.TimePosition = startTime
                        end
                        func(v)
                    end
                end)
            end
        end)
    end

    -- Detect animation, stop the old animation, and replace it with the new one
    onAnimation("11343318134", function(animationTrack) -- place old anim here
        local player = game.Players.LocalPlayer
        local char = player.Character or player.CharacterAdded:Wait()
        local humanoid = char:WaitForChild("Humanoid")

        -- Stop the old animation
        if animationTrack then
            animationTrack:Stop() -- This will stop the old animation
        end

        -- Delay before playing the new animation
        local delayBeforeNewAnim = 0 -- Change this value to adjust delay
        wait(delayBeforeNewAnim)

        -- Create the new animation instance
        local newAnimation = Instance.new("Animation")
        newAnimation.AnimationId = "rbxassetid://11343318134" -- place new anim here

        -- Load and play the new animation
        local newAnimTrack = humanoid:LoadAnimation(newAnimation)

        -- Adjust the speed of the animation
        newAnimTrack:Play()
        newAnimTrack:AdjustSpeed(0.3) -- Adjust speed as needed

        -- Set the starting point of the new animation (if desired)
        local startTime = 0 -- Change this to skip to a specific second
        newAnimTrack.TimePosition = startTime

        -- Option to stop animation after a specific time in seconds
        local animDurationInSeconds = 10 -- Set the duration (in seconds) to stop the animation
        wait(animDurationInSeconds)
        
        newAnimTrack:Stop() -- Stop the animation after the specified duration
    end)

    -- Permanently disable the script on player death
    local char = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
    local humanoid = char:WaitForChild("Humanoid")

    humanoid.Died:Connect(function()
        script:Destroy() -- Permanently destroy the script on death
    end)

    -- Connect the VFX creation to the animation event
    local function onAnimation(animationTrack)
        if animationTrack.Animation.AnimationId == "rbxassetid://" .. animationId then
            createEffect() -- Create the effect when the specified animation plays
        end
    end

    -- Connect the onAnimation function
    local function setupAnimationListener()
        local player = game.Players.LocalPlayer
        local character = player and player.Character
        local humanoid = character and character:FindFirstChildOfClass("Humanoid")

        if humanoid then
            humanoid.AnimationPlayed:Connect(onAnimation)
        else
            warn("Humanoid not found!") -- Debugging information
        end
    end

    setupAnimationListener()

    -- Handle character respawn
    game.Players.LocalPlayer.CharacterAdded:Connect(setupAnimationListener)
